package kscosapi;
import ksvocapistruct.CKSConditionalOrderInitInsert;
import ksvocapistruct.CKSConditionalOrderModify;
import ksvocapistruct.CKSConditionalOrderQuery;
import ksvocapistruct.CKSConditionalOrderRemove;
import ksvocapistruct.CKSConditionalOrderSelect;
import ksvocapistruct.CKSConditionalOrderStateAlter;
import ksvocapistruct.CKSProfitAndLossOrderInsert;
import ksvocapistruct.CKSProfitAndLossOrderModify;
import ksvocapistruct.CKSProfitAndLossOrderQuery;
import ksvocapistruct.CKSProfitAndLossOrderRemove;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Virtual;
import org.bridj.cpp.CPPObject;
/**
 * <i>native declaration : KSCosApi.h:65</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("KSCosApi") 
public class CKSCosApi extends CPPObject {
	public CKSCosApi() {
		super();
	}
	/**
	 * \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u00bc\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * Original signature : <code>int ReqInitInsertConditionalOrder(CKSConditionalOrderInitInsert*, int)</code><br>
	 * <i>native declaration : KSCosApi.h:69</i>
	 */
	@Virtual(0) 
	public native int ReqInitInsertConditionalOrder(Pointer<CKSConditionalOrderInitInsert > pConditionalOrderInitInsert, int nRequestID);
	/**
	 * \ufffd\ufffd\u046f\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * Original signature : <code>int ReqQueryConditionalOrder(CKSConditionalOrderQuery*, int)</code><br>
	 * <i>native declaration : KSCosApi.h:72</i>
	 */
	@Virtual(1) 
	public native int ReqQueryConditionalOrder(Pointer<CKSConditionalOrderQuery > pConditionalOrderQuery, int nRequestID);
	/**
	 * \ufffd\u07b8\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * Original signature : <code>int ReqModifyConditionalOrder(CKSConditionalOrderModify*, int)</code><br>
	 * <i>native declaration : KSCosApi.h:75</i>
	 */
	@Virtual(2) 
	public native int ReqModifyConditionalOrder(Pointer<CKSConditionalOrderModify > pConditionalOrderModify, int nRequestID);
	/**
	 * \u027e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * Original signature : <code>int ReqRemoveConditionalOrder(CKSConditionalOrderRemove*, int)</code><br>
	 * <i>native declaration : KSCosApi.h:78</i>
	 */
	@Virtual(3) 
	public native int ReqRemoveConditionalOrder(Pointer<CKSConditionalOrderRemove > pConditionalOrderRemove, int nRequestID);
	/**
	 * \ufffd\ufffd\u0363\ufffd\udab2\udd3b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * Original signature : <code>int ReqStateAlterConditionalOrder(CKSConditionalOrderStateAlter*, int)</code><br>
	 * <i>native declaration : KSCosApi.h:81</i>
	 */
	@Virtual(4) 
	public native int ReqStateAlterConditionalOrder(Pointer<CKSConditionalOrderStateAlter > pConditionalOrderStateAlter, int nRequestID);
	/**
	 * \u0461\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * Original signature : <code>int ReqSelectConditionalOrder(CKSConditionalOrderSelect*, int)</code><br>
	 * <i>native declaration : KSCosApi.h:84</i>
	 */
	@Virtual(5) 
	public native int ReqSelectConditionalOrder(Pointer<CKSConditionalOrderSelect > pConditionalOrderSelect, int nRequestID);
	/**
	 * \u05b9\ufffd\ufffd\u05b9\u04ef\ufffd\ufffd\u00bc\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * Original signature : <code>int ReqInsertProfitAndLossOrder(CKSProfitAndLossOrderInsert*, int)</code><br>
	 * <i>native declaration : KSCosApi.h:87</i>
	 */
	@Virtual(6) 
	public native int ReqInsertProfitAndLossOrder(Pointer<CKSProfitAndLossOrderInsert > pProfitAndLossOrderInsert, int nRequestID);
	/**
	 * \u05b9\ufffd\ufffd\u05b9\u04ef\ufffd\ufffd\ufffd\u07b8\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * Original signature : <code>int ReqModifyProfitAndLossOrder(CKSProfitAndLossOrderModify*, int)</code><br>
	 * <i>native declaration : KSCosApi.h:90</i>
	 */
	@Virtual(7) 
	public native int ReqModifyProfitAndLossOrder(Pointer<CKSProfitAndLossOrderModify > pProfitAndLossOrderModify, int nRequestID);
	/**
	 * \u05b9\ufffd\ufffd\u05b9\u04ef\ufffd\ufffd\u027e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * Original signature : <code>int ReqRemoveProfitAndLossOrder(CKSProfitAndLossOrderRemove*, int)</code><br>
	 * <i>native declaration : KSCosApi.h:93</i>
	 */
	@Virtual(8) 
	public native int ReqRemoveProfitAndLossOrder(Pointer<CKSProfitAndLossOrderRemove > pProfitAndLossOrderRemove, int nRequestID);
	/**
	 * \u05b9\ufffd\ufffd\u05b9\u04ef\ufffd\ufffd\ufffd\ufffd\u046f\ufffd\ufffd\ufffd\ufffd<br>
	 * Original signature : <code>int ReqQueryProfitAndLossOrder(CKSProfitAndLossOrderQuery*, int)</code><br>
	 * <i>native declaration : KSCosApi.h:96</i>
	 */
	@Virtual(9) 
	public native int ReqQueryProfitAndLossOrder(Pointer<CKSProfitAndLossOrderQuery > pProfitAndLossOrderQuery, int nRequestID);
	public CKSCosApi(Pointer pointer) {
		super(pointer);
	}
}
